{"version":3,"sources":["app/utils.js","features/login/loginSlice.js","features/contacts/addContact/addContactSlice.js","features/contacts/deleteContact/deleteContactSlice.js","features/contacts/editContact/editContactSlice.js","features/header/Header.js","features/login/Login.js","features/contacts/contactList/contactListSlice.js","features/contacts/contactList/contactList.js","features/contacts/addContact/AddContact.js","features/contacts/deleteContact/DeleteContact.js","features/contacts/editContact/EditContact.js","features/contacts/contactPage/ContactPage.js","App.js","app/store.js","index.js"],"names":["userName","userPsw","a","fetch","resp","ok","json","data","userList","filter","el","userPassword","length","console","log","list","loginSlice","createSlice","name","initialState","isLoggedIn","failLoginMessage","loginAttempts","reducers","setAuthUser","state","action","payload","clearAuthUser","setFailLoginMessage","incrementLoginAttempts","actions","loginAction","dispatch","login","then","res","getIsLoggedIn","auth","getLoggedUser","getFailLoginMessage","getLoginAttempts","addContactSlice","isAddContactMode","stopAddContactAction","startAddContactAction","getAddContactMode","addContact","deleteContactSlice","isDeleteContactMode","deleteId","startDeleteContactAction","stopDeleteContactAction","setDeleteContactMode","getDeleteContactMode","deleteContact","getDeleteId","editContactSlice","isEditMode","editId","startEditContactAction","stopEditContactAction","getEditContactMode","editContact","getEditContactId","Header","useSelector","loggedUser","useDispatch","className","onClick","src","alt","href","target","Login","userNameEl","useRef","userPswEl","type","placeholder","ref","value","e","preventDefault","current","getMaxId","arr","map","contactId","Math","max","contactListSlice","setContactList","addContactAction","push","contactName","contactPhone","deleteContactAction","updateContactAction","getContactList","contactList","ContactList","useEffect","getContactData","Fragment","AddContact","nameEl","phoneEl","DeleteContact","useState","contactInfo","setContactInfo","info","readOnly","EditContact","n","p","ContactPage","App","configureStore","reducer","loginReducer","addContactReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.3ad0eaa7.chunk.js","sourcesContent":["export async function login (userName, userPsw) {\r\n  try{\r\n    const resp = await fetch('./data/auth-data.json');\r\n    if (resp.ok) {\r\n      const data = await resp.json();\r\n      return data.userList.filter((el)=>{\r\n        return (el.userName === userName) && (el.userPassword === userPsw)\r\n      }).length > 0;\r\n    }\r\n    return false;\r\n  } catch (e) {\r\n    console.log('Error while loading auth-data.json:', e);\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getContactData(){\r\n  try{\r\n    const resp = await fetch(\"./data/contact-list-data.json\");\r\n    if (resp.ok) {\r\n      const data = await resp.json();\r\n      return data.list;\r\n    }\r\n    return [];\r\n\r\n  }catch(e){\r\n    console.log('Error while loading contact-list-data.json:', e);\r\n    return [];\r\n  }\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport {login} from './../../app/utils';\r\n\r\nexport const loginSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isLoggedIn: false,\r\n    userName: '',\r\n    failLoginMessage: '',\r\n    loginAttempts: 0,\r\n  },\r\n  reducers: {\r\n    setAuthUser: (state, action) => {\r\n      state.userName = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.loginAttempts = 0;\r\n    },\r\n    clearAuthUser: (state) =>{\r\n      state.isLoggedIn = false;\r\n      state.userName = '';\r\n      state.loginAttempts = 0;\r\n    },\r\n    setFailLoginMessage: (state) => {\r\n      state.failLoginMessage = 'incorrect login or password';\r\n    },\r\n    incrementLoginAttempts: (state) => {\r\n      state.loginAttempts ++;\r\n    }\r\n  },\r\n});\r\n\r\n//export const { setAuthUser, clearAuthUser, setFailLoginMessage} = loginSlice.actions;\r\nconst { setAuthUser, setFailLoginMessage, incrementLoginAttempts} = loginSlice.actions;\r\nexport const { clearAuthUser } = loginSlice.actions;\r\n\r\nexport const loginAction = (userName, userPsw) => dispatch => {\r\n  login(userName, userPsw)\r\n    .then((res)=>{\r\n      dispatch(incrementLoginAttempts());\r\n      if (res) {\r\n        dispatch(setAuthUser(userName));\r\n      } else {\r\n        dispatch(setFailLoginMessage());\r\n      }\r\n    })\r\n};\r\n\r\nexport const getIsLoggedIn = state => state.auth.isLoggedIn;\r\nexport const getLoggedUser = state => state.auth.userName;\r\nexport const getFailLoginMessage = state => state.auth.failLoginMessage;\r\nexport const getLoginAttempts = state => state.auth.loginAttempts;\r\n\r\nexport default loginSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const addContactSlice = createSlice({\r\n  name: 'addContact',\r\n  initialState: {\r\n    isAddContactMode:false,\r\n  },\r\n  reducers: {\r\n    stopAddContactAction: (state) => {\r\n      state.isAddContactMode = false;\r\n    },\r\n    startAddContactAction: (state) => {\r\n      state.isAddContactMode = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  startAddContactAction,\r\n  stopAddContactAction } = addContactSlice.actions;\r\n\r\nexport const getAddContactMode = state => {\r\n  return state.addContact.isAddContactMode;\r\n};\r\n\r\nexport default addContactSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst deleteContactSlice = createSlice({\r\n  name: 'deleteContact',\r\n  initialState: {\r\n    isDeleteContactMode:false,\r\n    deleteId: null,\r\n  },\r\n  reducers: {\r\n    startDeleteContactAction: (state, action) => {\r\n      state.isDeleteContactMode = true;\r\n      state.deleteId = action.payload;\r\n    },\r\n    stopDeleteContactAction: (state) => {\r\n      state.isDeleteContactMode = false;\r\n      state.deleteId = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  setDeleteContactMode,\r\n  startDeleteContactAction,\r\n  stopDeleteContactAction} = deleteContactSlice.actions;\r\n\r\nexport const getDeleteContactMode = state => {\r\n  return state.deleteContact.isDeleteContactMode;\r\n};\r\n\r\nexport const getDeleteId = state => {\r\n  return state.deleteContact.deleteId;\r\n}\r\n\r\nexport default deleteContactSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst editContactSlice = createSlice({\r\n  name: 'editContact',\r\n  initialState: {\r\n    isEditMode: false,\r\n    editId: null,\r\n  },\r\n  reducers: {\r\n    startEditContactAction: (state, action) => {\r\n      state.isEditMode = true;\r\n      state.editId = action.payload;\r\n    },\r\n    stopEditContactAction: (state) => {\r\n      state.isEditMode = false;\r\n      state.editId = null;\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  startEditContactAction,\r\n  stopEditContactAction } = editContactSlice.actions;\r\n\r\nexport const getEditContactMode = (state) => {\r\n  return state.editContact.isEditMode;\r\n}\r\n\r\nexport const getEditContactId = (state) => {\r\n  return state.editContact.editId;\r\n}\r\n\r\nexport default editContactSlice.reducer;","import React, { useState, useRef } from 'react';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {getIsLoggedIn, getLoggedUser, clearAuthUser} from './../login/loginSlice';\r\nimport {startAddContactAction} from './../contacts/addContact/addContactSlice';\r\nimport {stopDeleteContactAction} from './../contacts/deleteContact/deleteContactSlice';\r\nimport {stopEditContactAction} from './../contacts/editContact/editContactSlice';\r\n\r\nimport './header.scss';\r\n\r\nexport function Header(){\r\n\r\n  const isLoggedIn = useSelector(getIsLoggedIn);\r\n  const loggedUser = useSelector(getLoggedUser);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <article className=\"header-container\">\r\n\r\n      <div className = \"header-right\">\r\n        {!isLoggedIn && (\r\n            <span>\r\n              Тестовое задание Takeoff Staff\r\n            </span>\r\n        )}\r\n\r\n        {isLoggedIn && (\r\n          <span>\r\n            Пользователь: {loggedUser}\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      <div className = \"header-center\">\r\n        {isLoggedIn && (\r\n          <div>\r\n            <button\r\n              className=\"header__contact-btn\"\r\n              onClick = {()=>{\r\n                dispatch(startAddContactAction());\r\n                dispatch(stopDeleteContactAction());\r\n                dispatch(stopEditContactAction());\r\n              }}>\r\n              <img className=\"header__add-contact-icon\" src=\"../icons/add_icon.png\" alt=\"add\"/>\r\n              Add contact\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"header-left\">\r\n        {isLoggedIn && (\r\n          <button  className=\"header__contact-btn\"\r\n            onClick={()=>{ dispatch(clearAuthUser())}}\r\n            >\r\n            <img\r\n              className=\"header-logout\"\r\n              src=\"../icons/logout_icon.png\"\r\n              alt=\"logout\"\r\n            />\r\n            log out\r\n          </button>\r\n        )}\r\n\r\n        {!isLoggedIn && (\r\n            <a href=\"./data/auth-data.json\" target=\"blank\">JSON со списком логинов и паролей</a>\r\n        )}\r\n      </div>\r\n\r\n    </article>\r\n  )\r\n}","import React, { useState, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {getIsLoggedIn, loginAction, getFailLoginMessage, getLoginAttempts} from './loginSlice';\r\n\r\nimport './login.scss';\r\n\r\nexport function Login(){\r\n\r\n  const isLoggedIn = useSelector(getIsLoggedIn);\r\n  const failLoginMessage = useSelector(getFailLoginMessage);\r\n  const loginAttempts = useSelector(getLoginAttempts);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userNameEl = useRef('');\r\n  const userPswEl = useRef('');\r\n\r\n  return !isLoggedIn && (\r\n    <form className='login-comp__container'>\r\n\r\n      <div>\r\n        <input className='login-comp__input' type='text' placeholder='login' ref={userNameEl}/>\r\n      </div>\r\n\r\n      <div className='login-comp__line'>\r\n        <input className='login-comp__input' type='text' placeholder='password' ref={userPswEl}/>\r\n      </div>\r\n\r\n      <div className='login-comp__line'>\r\n        <input\r\n          className='login-comp__input login-comp__btn'\r\n          type='submit'\r\n          value = \"login\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            dispatch(loginAction(userNameEl.current.value, userPswEl.current.value))\r\n            }\r\n          }\r\n        />\r\n      </div>\r\n\r\n      {\r\n        (loginAttempts>0) && (\r\n        <div>\r\n          <p>login attempts: {loginAttempts}</p>\r\n          <p>login result: {failLoginMessage}</p>\r\n        </div>\r\n        )\r\n      }\r\n\r\n    </form>\r\n  )\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nfunction getMaxId (arr) {\r\n  const a = arr.map((el)=>{\r\n    return el.contactId;\r\n  });\r\n  return Math.max(...a, 0);\r\n}\r\n\r\nexport const contactListSlice = createSlice({\r\n  name: 'contactList',\r\n  initialState: {\r\n    list: [],\r\n  },\r\n  reducers: {\r\n    setContactList: (state, action) => {\r\n      state.list = action.payload;\r\n    },\r\n    addContactAction: (state, action) => {\r\n      state.list.push({\r\n        contactId:getMaxId([...state.list])+1,\r\n        contactName: action.payload.contactName,\r\n        contactPhone: action.payload.contactPhone,\r\n      })\r\n    },\r\n    deleteContactAction: (state, action) => {\r\n      state.list = state.list.filter((el)=>{\r\n        return (el.contactId !== action.payload);\r\n      });\r\n    },\r\n    updateContactAction: (state, action) => {\r\n      state.list = state.list.map((el) => {\r\n        if (el.contactId === action.payload.contactId) {\r\n          return {\r\n            contactId: action.payload.contactId,\r\n            contactName: action.payload.contactName,\r\n            contactPhone: action.payload.contactPhone,\r\n          }\r\n        } else {\r\n          return {...el}\r\n        }\r\n      })\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  setContactList,\r\n  addContactAction,\r\n  deleteContactAction,\r\n  updateContactAction} = contactListSlice.actions;\r\n\r\nexport const getContactList = state => state.contactList.list;\r\n\r\nexport default contactListSlice.reducer;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getContactData } from './../../../app/utils';\r\n\r\nimport { setContactList, getContactList } from './contactListSlice';\r\nimport { getDeleteId, startDeleteContactAction, stopDeleteContactAction } from './../deleteContact/deleteContactSlice';\r\nimport { stopAddContactAction } from './../addContact/addContactSlice';\r\nimport { stopEditContactAction, startEditContactAction } from './../editContact/editContactSlice';\r\n\r\nimport './contactList.scss';\r\n\r\nexport function ContactList() {\r\n\r\n  const dispatch = useDispatch();\r\n  const list = useSelector(getContactList);\r\n  const deleteId = useSelector(getDeleteId);\r\n\r\n  useEffect(()=>{\r\n    getContactData().then((data)=>{\r\n      dispatch(setContactList(data));\r\n    })\r\n  }, []);\r\n\r\n  console.log(list);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <table className=\"contactList__container\">\r\n        <tbody>\r\n          <tr>\r\n            <th className=\"contactList__header-column\"> Id </th>\r\n            <th className=\"contactList__header-column\"> Name </th>\r\n            <th className=\"contactList__header-column\"> Phone </th>\r\n            <th className=\"contactList__header-column\"> Actions </th>\r\n          </tr>\r\n          { (list.length>0) && (\r\n            list.map((el)=>{\r\n              return (\r\n                <tr key={el.contactId} className=\"contactList__row\">\r\n                  <td className=\"contactList__column\">\r\n                    {el.contactId}\r\n                  </td>\r\n                  <td className=\"contactList__column\">\r\n                    {el.contactName}\r\n                  </td>\r\n                  <td className=\"contactList__column\">\r\n                    {el.contactPhone}\r\n                  </td>\r\n                  <td>\r\n                    <img\r\n                      className=\"contactList__icon\"\r\n                      src=\"../icons/edit_icon.png\"\r\n                      alt=\"edit\"\r\n                      onClick = { ()=>{\r\n                        dispatch(stopAddContactAction());\r\n                        dispatch(stopDeleteContactAction());\r\n                        dispatch(startEditContactAction(el.contactId));\r\n                      }}\r\n                      />\r\n                    <img\r\n                      className=\"contactList__icon\"\r\n                      src=\"../icons/delete_icon.png\"\r\n                      alt=\"delete\"\r\n                      onClick={()=>{\r\n                        dispatch(stopAddContactAction());\r\n                        dispatch(stopEditContactAction());\r\n                        dispatch(startDeleteContactAction(el.contactId));\r\n                      }}/>\r\n                  </td>\r\n              </tr>\r\n              )\r\n            })\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </React.Fragment>\r\n  )\r\n}","import React, {useRef}  from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport { getAddContactMode, stopAddContactAction, addContact } from './addContactSlice';\r\nimport { addContactAction } from './../contactList/contactListSlice';\r\n\r\nimport './addContact.scss';\r\n\r\nexport function AddContact(){\r\n\r\n  const isAddContactMode = useSelector(getAddContactMode);\r\n\r\n  const nameEl = useRef('');\r\n  const phoneEl = useRef('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    isAddContactMode && (\r\n      <form className=\"addContact__container\">\r\n        <input className='addContact__input' type='text' placeholder='name' ref={nameEl}/>\r\n\r\n        <input className='addContact__input addContact__phone' type='text' placeholder='phone' ref={phoneEl}/>\r\n\r\n        <input\r\n          className='addContact__input addContact__btn'\r\n          type='submit'\r\n          value = \"add\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            dispatch(addContactAction({\r\n              contactName:nameEl.current.value,\r\n              contactPhone:phoneEl.current.value\r\n              }));\r\n            dispatch(stopAddContactAction());\r\n            }\r\n          }\r\n        />\r\n\r\n        <input\r\n          className='addContact__input addContact__btn'\r\n          type='button'\r\n          value = \"close\"\r\n          onClick={(e) => {\r\n            dispatch(stopAddContactAction());\r\n            }\r\n          }\r\n        />\r\n      </form>\r\n    )\r\n  )\r\n}","import React, {useState, useEffect}  from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport {getDeleteContactMode, getDeleteId, setDeleteContactMode, stopDeleteContactAction} from './deleteContactSlice';\r\nimport {getContactList, deleteContactAction} from './../contactList/contactListSlice';\r\n\r\nimport './deleteContact.scss';\r\n\r\nexport function DeleteContact(){\r\n\r\n  const dispatch = useDispatch();\r\n  const isDeleteContactMode = useSelector(getDeleteContactMode);\r\n  const deleteId = useSelector(getDeleteId);\r\n  const contactList = useSelector(getContactList);\r\n\r\n  const [contactInfo, setContactInfo] = useState({\r\n    contactName: 'contactName',\r\n    contactPhone: 'contactPhone'\r\n  });\r\n\r\n  useEffect(()=>{\r\n    const arr = contactList.filter((el)=>{return el.contactId === deleteId});\r\n    if (arr.length === 1) {\r\n      const info = {\r\n        contactName: arr[0].contactName,\r\n        contactPhone: arr[0].contactPhone,\r\n      }\r\n      setContactInfo(info);\r\n    }\r\n  }, [deleteId, contactList]);\r\n\r\n  return isDeleteContactMode && deleteId && (\r\n    <form className=\"deleteContact__container\">\r\n\r\n      <input\r\n        className='deleteContact__input'\r\n        type='text'\r\n        value={ contactInfo.contactName }\r\n        readOnly\r\n      />\r\n\r\n      <input\r\n        className='deleteContact__input deleteContact__phone'\r\n        value = { contactInfo.contactPhone}\r\n        readOnly\r\n        type='text'\r\n      />\r\n\r\n      <input\r\n        className='deleteContact__input deleteContact__btn'\r\n        type='submit'\r\n        value = \"delete\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n\r\n          dispatch(deleteContactAction(deleteId));\r\n          dispatch(stopDeleteContactAction());\r\n          }\r\n        }\r\n      />\r\n\r\n      <input\r\n        className='deleteContact__input deleteContact__btn'\r\n        type='button'\r\n        value = \"close\"\r\n        onClick={(e) => {\r\n          dispatch(stopDeleteContactAction());\r\n          }\r\n        }\r\n      />\r\n\r\n  </form>\r\n  )\r\n}\r\n\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\n\r\nimport { getEditContactMode, getEditContactId, stopEditContactAction } from './editContactSlice';\r\nimport {getContactList, updateContactAction } from './../contactList/contactListSlice';\r\n\r\nimport './editContact.scss';;\r\n\r\nexport function EditContact(){\r\n\r\n  const dispatch = useDispatch();\r\n  const isEditMode = useSelector(getEditContactMode);\r\n  const editId = useSelector(getEditContactId);\r\n  const contactList = useSelector(getContactList);\r\n\r\n  const [contactInfo, setContactInfo] = useState({\r\n    contactName: 'contactName',\r\n    contactPhone: 'contactPhone'\r\n  });\r\n\r\n  useEffect(()=>{\r\n    const arr = contactList.filter((el)=>{return el.contactId === editId});\r\n    if (arr.length === 1) {\r\n      const info = {\r\n        contactName: arr[0].contactName,\r\n        contactPhone: arr[0].contactPhone,\r\n      }\r\n      setContactInfo(info);\r\n      setContactInfoToDOM(arr[0].contactName, arr[0].contactPhone);\r\n    }\r\n  }, [editId]);\r\n\r\n  const nameEl = useRef('');\r\n  const phoneEl = useRef('');\r\n\r\n  function setContactInfoToDOM(n,p){\r\n    nameEl.current.value = n;\r\n    phoneEl.current.value = p;\r\n  }\r\n\r\n  return isEditMode && editId && (\r\n    <form className=\"editContact__container\">\r\n    <input\r\n      className='editContact__input'\r\n      type='text'\r\n      placeholder='name'\r\n      ref = {nameEl}\r\n    />\r\n\r\n    <input\r\n      className='editContact__input editContact__phone'\r\n      type='text'\r\n      placeholder='phone'\r\n      ref = {phoneEl}\r\n    />\r\n\r\n    <input\r\n      className='editContact__input editContact__btn'\r\n      type='submit'\r\n      value = \"save\"\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        dispatch(updateContactAction({\r\n          contactId: editId,\r\n          contactName:nameEl.current.value,\r\n          contactPhone:phoneEl.current.value\r\n        }));\r\n\r\n        dispatch(stopEditContactAction());\r\n        }\r\n      }\r\n    />\r\n\r\n    <input\r\n      className='editContact__input editContact__btn'\r\n      type='button'\r\n      value = \"close\"\r\n      onClick={(e) => {\r\n        dispatch(stopEditContactAction());\r\n        }\r\n      }\r\n    />\r\n  </form>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getIsLoggedIn } from './../../login/loginSlice';\r\n\r\nimport { ContactList } from './../contactList/contactList';\r\nimport { AddContact } from './../addContact/AddContact';\r\nimport { DeleteContact } from './../deleteContact/DeleteContact';\r\nimport { EditContact } from './../editContact/EditContact';\r\n\r\nimport './contactPage.scss';\r\n\r\nexport function ContactPage() {\r\n\r\n  const isLoggedIn = useSelector(getIsLoggedIn);\r\n\r\n  return isLoggedIn && (\r\n    <article className=\"contactPage__container\">\r\n      <AddContact/>\r\n      <DeleteContact/>\r\n      <EditContact/>\r\n      <ContactList/>\r\n    </article>\r\n  )\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Header } from './features/header/Header';\r\nimport { Login } from './features/login/Login.js';\r\nimport { ContactList } from './features/contacts/contactList/contactList';\r\nimport { AddContact } from './features/contacts/addContact/AddContact';\r\n\r\nimport { ContactPage } from './features/contacts/contactPage/ContactPage';\r\n\r\nimport 'normalize.css';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Header/>\r\n      <Login/>\r\n      <ContactPage/>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport loginReducer from '../features/login/loginSlice';\r\nimport addContactReducer from '../features/contacts/addContact/addContactSlice';\r\nimport contactListSlice from '../features/contacts/contactList/contactListSlice';\r\nimport deleteContactSlice from '../features/contacts/deleteContact/deleteContactSlice';\r\nimport editContactSlice from '../features/contacts/editContact/editContactSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: loginReducer,\r\n    addContact: addContactReducer,\r\n    contactList: contactListSlice,\r\n    deleteContact: deleteContactSlice,\r\n    editContact: editContactSlice,\r\n  },\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}